{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "24747fd8-5301-4c67-9aaf-5021fa0a3370",
   "metadata": {},
   "source": [
    "# TensorFlow Developer Exam Handbook Overview\n",
    "\n",
    "### TensorFlow Certificate Candidate Handbook\n",
    "\n",
    "* https://www.tensorflow.org/static/extras/cert/TF_Certificate_Candidate_Handbook.pdf\n",
    "\n",
    "### Previous Tester Experiences\n",
    "* https://medium.com/@judytraj007/getting-the-google-tensorflow-developer-certification-51cf1e4c2bf9\n",
    "* https://medium.com/@rbarbero/tensorflow-certification-tips-d1e0385668c8\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9db0691d-4dcb-473f-be1c-666c6ab1be1e",
   "metadata": {},
   "source": [
    "## Notebook Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d43c254-65f2-4442-ab38-b0f8d61f3b06",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "892e7aea-5377-41df-95fe-7331f4b6af0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "import os\n",
    "\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "066fb217-e776-4357-a4e5-4767326ddcb9",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Notebook Details"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a8ab8b5c-c311-4e33-a351-122f25c440cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Notebook last run (end-to-end): 2023-09-24 20:50:09.252760\n"
     ]
    }
   ],
   "source": [
    "print(f'Notebook last run (end-to-end): {datetime.datetime.now()}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "204c333a-4cf4-4ee1-9bf8-c3f25d397638",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## 1. TensorFlow Development Skills\n",
    "You need to demonstrate that you understand how to develop software programs using TensorFlow and that you can find the information you need to work as an ML practitioner.\n",
    "\n",
    "You need to:\n",
    "1. Know how to program in Python, resolve Python issues, and compile and run Python programs in PyCharm.\n",
    "2. Know how to find information about TensorFlow APIs, including how to find guides and API references on tensorflow.org.\n",
    "3. Know how to debug, investigate, and solve error messages from the TensorFlow API.\n",
    "4. Know how to search beyond tensorflow.org, as and when necessary, to solve your TensorFlow questions.\n",
    "5. Know how to create ML models using TensorFlow where the model size is reasonable for the problem being solved.\n",
    "6. Know how to save ML models and check the model file size.\n",
    "7. Understand the compatibility discrepancies between different versions of TensorFlow."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de92e3c0-c5d2-466d-8192-17cd1147eb04",
   "metadata": {},
   "source": [
    "### 1.1. Know how to program in Python, resolve Python issues, and compile and run Python programs in PyCharm.\n",
    "* [Downloading PyCharm](https://www.jetbrains.com/pycharm/)\n",
    "* [Learn PyCharm](https://www.jetbrains.com/pycharm/learn/)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d0b7db3-face-42d7-af9c-1fe737a56791",
   "metadata": {},
   "source": [
    "### 1.2. Know how to find information about TensorFlow APIs, including how to find guides and API references on tensorflow.org.\n",
    "* [API Documentation](https://www.tensorflow.org/api_docs/python/tf)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "287958a3-1b41-4b68-b7ad-307b5f5eb108",
   "metadata": {},
   "source": [
    "### 1.3. Know how to debug, investigate, and solve error messages from the TensorFlow API.\n",
    "* [Debugging Tips](https://towardsdatascience.com/debugging-in-tensorflow-392b193d0b8)\n",
    "* [TensorFlow Errors](https://www.tensorflow.org/api_docs/python/tf/errors)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e856802-1d2d-4678-89d1-4147237a760f",
   "metadata": {},
   "source": [
    "### 1.4. Know how to search beyond tensorflow.org, as and when necessary, to solve your TensorFlow questions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d33ecfe2-a626-4a01-a883-d69df8ae2400",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### 1.5. Know how to create ML models using TensorFlow where the model size is reasonable for the problem being solved.\n",
    "\n",
    "* Sequential Model\n",
    "* Functional API Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82213540-2f7d-41bc-b5c8-a1e7959d65ca",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "#### Sequential Model\n",
    "\n",
    "* `tf.keras.models.Sequential`\n",
    "* https://www.tensorflow.org/api_docs/python/tf/keras/Sequential"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "032fc5c1-dfad-4cfe-93e3-166502bdec26",
   "metadata": {},
   "outputs": [],
   "source": [
    "sequential_model = tf.keras.models.Sequential([\n",
    "    tf.keras.layers.Input(shape=(2,), name='input_layer'),\n",
    "    tf.keras.layers.Dense(10, activation='relu', name='hidden_layer_1'),\n",
    "    tf.keras.layers.Dense(1, activation=tf.keras.activations.sigmoid, name='output'),\n",
    "], name='sequential_model')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54d9c282-c764-45e2-94f0-256aa07787aa",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "#### Functional API\n",
    "\n",
    "* `tf.keras.models.Model`\n",
    "* https://www.tensorflow.org/api_docs/python/tf/keras/Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fdc49b74-b299-4106-a7b8-7b0c1de7b95d",
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs = tf.keras.layers.Input(shape=(2,), name='input_layer')\n",
    "x = tf.keras.layers.Dense(10, activation='relu', name='hidden_layer_1')(inputs)\n",
    "outputs = tf.keras.layers.Dense(1, activation=tf.keras.activations.sigmoid, name='output')(x)\n",
    "\n",
    "functional_model = tf.keras.models.Model(inputs, outputs, name='functional_model')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f826f3d0-ca77-4860-9a8e-8c259d9ce89c",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### 1.6. Know how to save ML models and check the model file size.\n",
    "\n",
    "Models can be saved in one of two formats: `h5` or `TF`.\n",
    "\n",
    "* [Saving and Loading Models Article](https://www.kdnuggets.com/2021/02/saving-loading-models-tensorflow.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0f3785c-a274-4b9a-91d8-a1fbc40d08ff",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "#### Saving Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "332d3a8b-2854-4017-a956-308284cf3132",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: ./models/sequential_model/assets\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: ./models/sequential_model/assets\n"
     ]
    }
   ],
   "source": [
    "sequential_model.save('./models/sequential_model')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d9470a43-3b39-4d5f-b28e-d54bfe638acc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/brandonkubick/Code/deep-learning-development/env/lib/python3.9/site-packages/keras/src/engine/training.py:3000: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
      "  saving_api.save_model(\n",
      "WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
     ]
    }
   ],
   "source": [
    "functional_model.save('./models/functional_model', save_format='h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bad1dc5-3602-473f-be57-01b8a8aa0a0e",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "#### Loading Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0fe22232-4bc5-451f-a4c7-9d1dcf6a2c84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:No training configuration found in save file, so the model was *not* compiled. Compile it manually.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:No training configuration found in save file, so the model was *not* compiled. Compile it manually.\n"
     ]
    }
   ],
   "source": [
    "sequential_model_loaded = tf.keras.models.load_model('./models/sequential_model')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "54b143ef-bc8c-4379-802d-01d0dbf24b5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:No training configuration found in the save file, so the model was *not* compiled. Compile it manually.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:No training configuration found in the save file, so the model was *not* compiled. Compile it manually.\n"
     ]
    }
   ],
   "source": [
    "functional_model_loaded = tf.keras.models.load_model('./models/functional_model')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d32776ea-9866-4efa-b40a-6cf37218b323",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "#### Checking File Size\n",
    "\n",
    "**TODO** Come back to check this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "533ba01b-ceef-41e1-aecc-1609876fb51b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50965"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_size = 0\n",
    "for dir, _, files in os.walk('./models/sequential_model'):\n",
    "    total_size += sum([os.path.getsize(f'{dir}/{file}') for file in files])\n",
    "\n",
    "total_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0a79851e-843e-4e15-adcc-21367d39c79a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16016"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.getsize('./models/functional_model')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89ef76b4-9cc6-4f2f-bb74-74468e3adc5f",
   "metadata": {},
   "source": [
    "### 1.7. Understand the compatibility discrepancies between different versions of TensorFlow.\n",
    "\n",
    "* https://www.tensorflow.org/guide/migrate/tf1_vs_tf2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4cf7e62-0a12-4000-b9d9-b1f26bceb5bc",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## 2. Building and training neural network models using TensorFlow 2.x\n",
    "\n",
    "You need to understand the foundational principles of machine learning (ML) and deep learning (DL) using TensorFlow 2.x.\n",
    "\n",
    "You need to know how to:\n",
    "1. Use TensorFlow 2.x.\n",
    "2. Build, compile and train machine learning (ML) models using TensorFlow.\n",
    "3. Preprocess data to get it ready for use in a model.\n",
    "4. Use models to predict results.\n",
    "5. Build sequential models with multiple layers.\n",
    "6. Build and train models for binary classification.\n",
    "7. Build and train models for multi-class categorization.\n",
    "8. Plot loss and accuracy of a trained model.\n",
    "9. Identify strategies to prevent overfitting, including augmentation and dropout.\n",
    "10. Use pretrained models (transfer learning).\n",
    "11. Extract features from pre-trained models.\n",
    "12. Ensure that inputs to a model are in the correct shape.\n",
    "13. Ensure that you can match test data to the input shape of a neural network.\n",
    "14. Ensure you can match output data of a neural network to specified input shape for test data.\n",
    "15. Understand batch loading of data.\n",
    "16. Use callbacks to trigger the end of training cycles.\n",
    "17. Use datasets from different sources.\n",
    "18. Use datasets in different formats, including json and csv.\n",
    "19. Use datasets from tf.data.datasets."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0a8e7c3-e662-4e8d-92a1-9062fa5d1064",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### 2.1. Use TensorFlow 2.x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "34d9d344-2316-459e-877c-8078ebdbcd73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.13.0'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03d50afc-51be-42ee-a007-4fb51491ead2",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### 2.2. Build, compile and train machine learning (ML) models using TensorFlow."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5b70891-b1bc-4a24-9241-b2dd96d6876c",
   "metadata": {},
   "source": [
    "#### Setup Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80ffac8b-7a53-4e55-9bd8-075e9227c635",
   "metadata": {},
   "source": [
    "#### Build "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc9a574b-d477-44c8-ada6-d13bd0fdf833",
   "metadata": {},
   "source": [
    "#### Compile Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef808721-ea8b-4806-86b3-bd97abaa5784",
   "metadata": {},
   "source": [
    "#### Train Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63ec02ea-f892-46a2-aba8-a710391d5310",
   "metadata": {},
   "source": [
    "### 2.3. Preprocess data to get it ready for use in a model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bf905d5-3aeb-40af-94f2-ca5734c107b9",
   "metadata": {},
   "source": [
    "### 2.4. Use models to predict results."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "feaeaac4-7a56-4e7e-a23a-b4c0f2f138b5",
   "metadata": {},
   "source": [
    "### 2.5. Build sequential models with multiple layers."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "936b8dbe-6676-4094-bdc3-09392c966a5e",
   "metadata": {},
   "source": [
    "### 2.6. Build and train models for binary classification."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "773465c8-3d55-4c04-beb8-b72983708047",
   "metadata": {},
   "source": [
    "### 2.7. Build and train models for multi-class categorization."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf054d5a-0048-4272-ae9c-f0de2ab63b5c",
   "metadata": {},
   "source": [
    "### 2.8. Plot loss and accuracy of a trained model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3a5fa4b-f22a-4a7b-92b0-7521582dda0c",
   "metadata": {},
   "source": [
    "### 2.9. Identify strategies to prevent overfitting, including augmentation and dropout."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "968c7c6d-97a7-4b4e-80ac-94ffa6b20287",
   "metadata": {},
   "source": [
    "### 2.10. Use pretrained models (transfer learning)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a7860e9-b80c-4d8a-b628-da95cf3a2d56",
   "metadata": {},
   "source": [
    "### 2.11. Extract features from pre-trained models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e6a1185-b670-4d65-9074-d0aff9759430",
   "metadata": {},
   "source": [
    "### 2.12. Ensure that inputs to a model are in the correct shape."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52a939da-c04b-4951-9f66-ed948e59d121",
   "metadata": {},
   "source": [
    "### 2.13. Ensure that you can match test data to the input shape of a neural network."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1572fe77-47b4-495e-804f-4299da0f1ce0",
   "metadata": {},
   "source": [
    "### 2.14. Ensure you can match output data of a neural network to specified input shape for test data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "294089d6-4d33-4962-b63e-c2c2260a3c83",
   "metadata": {},
   "source": [
    "### 2.15. Understand batch loading of data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1279b74c-fc6c-453f-9eda-ab005d615a8f",
   "metadata": {},
   "source": [
    "### 2.16. Use callbacks to trigger the end of training cycles."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a1f4208-3747-4270-a588-a909697ca46f",
   "metadata": {},
   "source": [
    "### 2.17. Use datasets from different sources."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b0d65b8-f9d1-4d19-8c3f-0607265bcdee",
   "metadata": {},
   "source": [
    "### 2.18. Use datasets in different formats, including json and csv."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9abb5e5-e2e8-4e0b-9ac7-7ab297e29a5e",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### 2.19. Use datasets from tf.data.datasets.\n",
    "\n",
    "* https://www.tensorflow.org/datasets/performances"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ba123bb-97ff-4ef8-a493-533a89deff11",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## 3. Image classification\n",
    "\n",
    "You need to understand how to build image recognition and object detection models with deep neural networks and convolutional neural networks using TensorFlow 2.x.\n",
    "\n",
    "You need to know how to:\n",
    "1. Define Convolutional neural networks with Conv2D and pooling layers.\n",
    "2. Build and train models to process real-world image datasets.\n",
    "3. Understand how to use convolutions to improve your neural network.\n",
    "4. Use real-world images in different shapes and sizes.\n",
    "5. Use image augmentation to prevent overfitting.\n",
    "6. Use ImageDataGenerator.\n",
    "7. Understand how ImageDataGenerator labels images based on the directory structure."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f45ac9dc-433c-468a-afa0-4fc742941594",
   "metadata": {},
   "source": [
    "### 3.1. Define Convolutional neural networks with Conv2D and pooling layers."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "560f56e1-8db2-4293-a27d-e7650424e8ea",
   "metadata": {},
   "source": [
    "### 3.2. Build and train models to process real-world image datasets."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e79df9a5-9abc-423f-993e-c5ebbbbec3c3",
   "metadata": {},
   "source": [
    "### 3.3. Understand how to use convolutions to improve your neural network."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62842f8c-e1c0-4044-82dc-6d6b33b42b4f",
   "metadata": {},
   "source": [
    "### 3.4. Use real-world images in different shapes and sizes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a26b577e-7c80-4b17-995b-bbf3fe1f6712",
   "metadata": {},
   "source": [
    "### 3.5. Use image augmentation to prevent overfitting."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1e9324d-e824-46c1-955b-f466d5c16833",
   "metadata": {},
   "source": [
    "### 3.6. Use ImageDataGenerator."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e198f2c-8df7-4869-a5c6-ce20353e0fae",
   "metadata": {},
   "source": [
    "### 3.7. Understand how ImageDataGenerator labels images based on the directory structure."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2454c1cd-d3e8-4b85-adaa-24f923799595",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## 4. Natural language processing (NLP)\n",
    "\n",
    "You need to understand how to use neural networks to solve natural language processing problems using TensorFlow.\n",
    "\n",
    "You need to know how to:\n",
    "\n",
    "1. Build natural language processing systems using TensorFlow.\n",
    "2. Prepare text to use in TensorFlow models.\n",
    "3. Build models that identify the category of a piece of text using binary categorization\n",
    "4. Build models that identify the category of a piece of text using multi-class categorization\n",
    "5. Use word embeddings in your TensorFlow model.\n",
    "6. Use LSTMs in your model to classify text for either binary or multi-class categorization.\n",
    "7. Add RNN and GRU layers to your model.\n",
    "8. Use RNNS, LSTMs, GRUs and CNNs in models that work with text.\n",
    "9. Train LSTMs on existing text to generate text (such as songs and poetry)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd965bad-d15e-4ded-8c0e-a3760573b1c5",
   "metadata": {},
   "source": [
    "### 4.1. Build natural language processing systems using TensorFlow."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84ec7750-1446-4f59-9847-f9dfc85b04dd",
   "metadata": {},
   "source": [
    "### 4.2. Prepare text to use in TensorFlow models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b72d1143-9089-4e9f-afed-82fff6b3f937",
   "metadata": {},
   "source": [
    "### 4.3. Build models that identify the category of a piece of text using binary categorization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3db0d43-bafa-4dfb-be9f-02d4e63e555c",
   "metadata": {},
   "source": [
    "### 4.4. Build models that identify the category of a piece of text using multi-class categorization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbe081b7-93d7-413d-9565-20d8fb4cb3e9",
   "metadata": {},
   "source": [
    "### 4.5. Use word embeddings in your TensorFlow model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6728ee55-f39c-484e-b5d2-774df5d2816c",
   "metadata": {},
   "source": [
    "### 4.6. Use LSTMs in your model to classify text for either binary or multi-class categorization."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9dfa67e3-d18e-4b68-94f3-e5340640135c",
   "metadata": {},
   "source": [
    "### 4.7. Add RNN and GRU layers to your model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f3b5b1b-468a-42b8-8303-c7666b20062b",
   "metadata": {},
   "source": [
    "### 4.8. Use RNNS, LSTMs, GRUs and CNNs in models that work with text."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b7fd645-03ab-43c2-92eb-34bc06fd6329",
   "metadata": {},
   "source": [
    "### 4.9. Train LSTMs on existing text to generate text (such as songs and poetry)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "893e7eda-f0b8-45b4-86fd-1b8bc061e1af",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## 5. Time series, sequences and predictions\n",
    "\n",
    "You need to understand how to solve time series and forecasting problems in TensorFlow.\n",
    "\n",
    "You need to know how to:\n",
    "\n",
    "1. Train, tune and use time series, sequence and prediction models.\n",
    "2. Train models to predict values for both univariate and multivariate time series.\n",
    "3. Prepare data for time series learning.\n",
    "4. Understand Mean Absolute Error (MAE) and how it can be used to evaluate accuracy of sequence models.\n",
    "5. Use RNNs and CNNs for time series, sequence and forecasting models.\n",
    "6. Identify when to use trailing versus centred windows.\n",
    "7. Use TensorFlow for forecasting.\n",
    "8. Prepare features and labels.\n",
    "9. Identify and compensate for sequence bias.\n",
    "10. Adjust the learning rate dynamically in time series, sequence and prediction models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43d4b288-5abb-4750-92c6-bcf26e457117",
   "metadata": {},
   "source": [
    "### 5.1. Train, tune and use time series, sequence and prediction models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9df1ab11-ab5e-44a8-a600-109e86000127",
   "metadata": {},
   "source": [
    "### 5.2. Train models to predict values for both univariate and multivariate time series."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9da5fb03-8571-4da1-be7b-35a44059e31f",
   "metadata": {},
   "source": [
    "### 5.3. Prepare data for time series learning."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca75342a-455c-407b-a7ff-107dbb901272",
   "metadata": {},
   "source": [
    "### 5.4. Understand Mean Absolute Error (MAE) and how it can be used to evaluate accuracy of sequence models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e9544d1-9ec0-4e4a-9a74-645e8db0f46c",
   "metadata": {},
   "source": [
    "### 5.5. Use RNNs and CNNs for time series, sequence and forecasting models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "080f0f47-3302-41b7-b925-c6c8c1f54e5d",
   "metadata": {},
   "source": [
    "### 5.6. Identify when to use trailing versus centred windows."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e87a9ea-595f-4935-9d82-8495f6543436",
   "metadata": {},
   "source": [
    "### 5.7. Use TensorFlow for forecasting."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "228a61db-9da4-4ea6-869d-e98f841ca110",
   "metadata": {},
   "source": [
    "### 5.8. Prepare features and labels."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ca4daa1-1991-470a-8d61-03f858774d08",
   "metadata": {},
   "source": [
    "### 5.9. Identify and compensate for sequence bias."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb272cf5-b6bd-4dd9-ba33-0a09e4083707",
   "metadata": {},
   "source": [
    "### 5.10. Adjust the learning rate dynamically in time series, sequence and prediction models."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
